{"name":"code-flow","tagline":"Just let the code flow!","body":"## Welcome to my github page.\r\nMy name is @code-flow and I'm currently doing a lot with WordPress but I'm also interested in doing all sort of programming. If you want to learn more about me, check out [my personal website](http://florian-simeth.de/en/). If you want to contribute to my private projects, please feel free to do so.\r\n\r\n## Wind-Pi (a Raspberry Pi wind anemometer with the use of a cpu fan)\r\nA while ago I was searching for a cheap, affordable wind anemometer that can log data to a SD-card or anything else so that I can use that data to create a graph and for a other calculations.\r\nBut the problem was that all the anemometers with data-loggin functionalities are damn expansive and I didn't want to spend any money for that. So I decided to built my own with a [Raspberry Pi](http://www.raspberrypi.org/).\r\n\r\n### Notes:\r\nPlease feel free to use this code and the instructions to build your own Raspberry-Pi-Anemometer. But please note that there is no warranty for this free software (read the license for more information). \r\n\r\n### Challenges:\r\n* Cheap components\r\n* Data-Logging\r\n* Nice graph\r\n* Maybe a live-view\r\n\r\n### What do I need?\r\n* A CPU-Fan with a least three wires (see below why you need three wires)\r\n* A cheap anemometer to compare the cpu-fan-anemometer with the right wind speed (maybe something like this [http://www.reichelt.de/Windmesser-Anemometer/ANEMO-3000/3/index.html?;ACTION=3;LA=2;ARTICLE=84973;GROUPID=4030;artnr=ANEMO+3000](Wind Anemometer @ reichelt.de)\r\n* Some (long and isolated) wires\r\n* a soldering iron and some fine solder\r\n\r\n### Why do I need a CPU-Fan with three wires?\r\nThis is because we actually want to measure the speed. And the CPU-Fans with a least three wires have a built-in [Hall-Sensor](http://en.wikipedia.org/wiki/Hall_effect_sensor) which is there to work like a \"tacho\". So it returns something like the \"speed\" when it returns two pulses per one revolution of the fan. You can read more on the detailed functionality of a CPU-Fan here: [How PC Fans Work](http://en.wikipedia.org/wiki/Hall_effect_sensor)\r\n\r\n### How does it work?\r\n1. You have to open your CPU-Fan and remove the stator (or the magnets, if you will). Check out this page to learn [how to open the CPU-Fan](http://www.instructables.com/id/How-to-take-apart-a-case-fan/). Check this image to see what the stator is: [The stator of a CPU fan (image)](http://pcbheaven.com/scripts/imagepresent.php?filename=%2Fwikipages%2Fimages%2Fhowpcfanswork_1269849438.jpg)\r\n2. Then put the fan together again (without the stator). You will feel that the blades will now rotate more easy. This is because of the removed stator which was actually there to use the the whole thing as a little motor. Now it's just _generating pulses in the wind_ :-)\r\n3. Depending on the color of the wires that come out of the fan you have to connect them with the GPIOs of the Raspberry Pi. [According to this website](http://pcbheaven.com/wikipages/How_PC_Fans_Work/) you can have either a plug with black/red/yellow wires or a plug with red/yellow/green wires. In fact you have a positive power supply, a negative power supply and a wire that sends back the pulses.\r\n4. The positive wire gets connected with GPIO Pin 1 (which is 3,3V) but you can also connect it with Pin 2 (which is 5V) when your wires a pretty long (I have my self-made-anemometer on the roof of my house, so 2 volts get lost just because of the length of the wires).\r\n5. The negative wire gets connected with GPIO Pin 6 (which is GND/Ground).\r\n6. And the \"tacho\"-wire will be connected with GPIO pin 3 (which is SDA).\r\n7. That's it! Now let's start to code.\r\n\r\n### How does the code look like?\r\nThis was the most difficult part for me because I'm not really familiar with hardware-oriented programming. PHP is where I'm more \"at home\".\r\n\r\n1. First I've installed [Wiring PI](http://wiringpi.com/) which is a project by Gordon for an easy access to the GPIO pins.\r\n2. I've also installed an apache webserver with PHP and MySQL which we need later. (I hope you're familiar with installing those things on a linux-driven computer. If not, just ask Google. There are a hell of a lot guides out there which are pretty awesome.)\r\n3. You may also need so install a c-compiler as well as some modules you might need when compiling the program (like MySQL).\r\n4. You can find the windpi.c script on Github.\r\n\r\nCompiling the anemometer-script:\r\n\r\n`gcc -c -I/usr/include/mysql/ windpi.c`\r\n\r\nThen another compilation with the following line (activates mysql):\r\n`gcc -Wall -o windpi windpi.o -L/usr/local/lib -lwiringPi -lm -L/usr/lib/mysql -lmysqlclient`\r\n\r\nYou can start the windfan with my windpi.sh script which you can also find in the github repository.\r\n\r\nThat's it. The raspberry will now collect the wind-speed from your roof :-)\r\n\r\nIn a later post I will show you how to create a nice-looking graph out of the data the script collects.\r\n\r\n## Contact\r\nPlease check out my [Imprint page](http://florian-simeth.de/impressum/)\r\n","google":"UA-3022393-38","note":"Don't delete this file! It's used internally to help with page regeneration."}